using BigNumberRecursiveMod;
using System.Diagnostics;
using System.Numerics;

namespace TestRecursiveMod;

public class RecursiveModTest
{
    [Fact]
    public void T01()
    {
        string numberSequence = "777635";
        string divder = "32";

        int mod = RecursiveMod.CalculateMod(numberSequence, divder);

        Assert.Equal(3, mod);
    }

    [Fact]
    public void T02()
    {
        string numberSequence = "999999";
        string divder = "68";

        int mod = RecursiveMod.CalculateMod(numberSequence, divder);

        Assert.Equal(59, mod);
    }

    [Fact]
    public void T03()
    {
        string numberSequence = "491984984";
        string divder = "978";

        int mod = RecursiveMod.CalculateMod(numberSequence, divder);

        Assert.Equal(128, mod);
    }

    [Fact]
    public void T04()
    {
        string numberSequence = "41646849849849161654198498498498498498498498465416515151564651189198484000084984987496874984984984894984984984984981";
        string divder = "97";

        int mod = RecursiveMod.CalculateMod(numberSequence, divder);

        Assert.True(mod < 97);
    }

    [Fact]
    public void T05()
    {
        string numberSequence

        
        BigInteger dividerBitInt = 97;

        Stopwatch sw = new();

        GC.Collect(); // clean up before measurement
        GC.WaitForPendingFinalizers();
        GC.Collect();

        long before1 = GC.GetTotalMemory(true);
        sw.Start();
        var numSeqBigInt = BigInteger.Parse(numberSequence);
        var mod1 = (int)(numSeqBigInt % dividerBitInt);
        sw.Stop();
        var time1 = sw.Elapsed;
        long after1 = GC.GetTotalMemory(true);
        long total1 = after1 - before1;

        GC.Collect(); // clean up before measurement
        GC.WaitForPendingFinalizers();

        long before2 = GC.GetTotalMemory(true);
        sw.Start();
        int mod2 = RecursiveMod.CalculateMod(numberSequence, 97);
        sw.Stop();
        var time2 = sw.Elapsed;
        long after2 = GC.GetTotalMemory(true);
        long total2 = after2 - before2;

        //long before3 = GC.GetTotalMemory(true);
        //sw.Start();
        //int mod3 = RecursiveMod.CalculateRecursiveOld(numberSequence, 97, 2);
        //sw.Stop();
        //var time3 = sw.Elapsed;
        //long after3 = GC.GetTotalMemory(true);
        //long total3 = after3 - before3;

        Assert.Equal(mod1, mod2);
    }
}